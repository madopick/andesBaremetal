# -----------------------------------------------------------------------------
# Copyright (c) 2016, Andes Technology Corporation
# All rights reserved.
# -----------------------------------------------------------------------------

DEMO ?= UART
MODE ?= LOAD

### Compiler definitions

ifndef CROSS_COMPILE
	ifeq (riscv32,$(COMPILER))
		CROSS_COMPILE = riscv32-elf-
	endif
endif
ifndef CROSS_COMPILE
	ifeq (riscv64,$(COMPILER))
		CROSS_COMPILE = riscv64-elf-
	endif
endif
ifndef CROSS_COMPILE
$(error You have to specify 'COMPILER' to build ! Ex: make COMPILER=[riscv32|riscv64])
endif

CC	= $(CROSS_COMPILE)gcc
C++	= $(CROSS_COMPILE)g++
AS	= $(CROSS_COMPILE)gcc
LD	= $(CROSS_COMPILE)gcc
AR	= $(CROSS_COMPILE)ar
OBJCOPY	= $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump

ifeq ($(DEBUG),1)
OPTIM   := -O0 -g3
else
OPTIM   := -Os -g3
endif

### Define the directories

BUILDDIR = build

BSPDIR = bsp
DRVDIR = driver

ifneq ($(filter $(PLAT), AE350 AE250),$(PLAT))
$(error Unknown PLAT "$(PLAT)" is not supported!)
endif

ifneq ($(filter $(DEMO), UART GPIO RTC I2C SPI PWM WDT),$(DEMO))
$(error Unknown Demo function "$(DEMO)" is not supported!)
endif

PLATNAME = $(shell echo $(PLAT) | tr A-Z a-z)
PLATDIR = $(BSPDIR)/v5/$(PLATNAME)

DEMONAME = $(shell echo $(DEMO) | tr A-Z a-z)
DEMODIR = examples/$(DEMONAME)

### Define the source files we have

# BSP source files

STARTSRCS = $(BSPDIR)/v5/start.S

BSPSRCS = \
	$(STARTSRCS) \
	$(BSPDIR)/v5/reset.c \
	$(BSPDIR)/v5/initfini.c \
	$(BSPDIR)/v5/trap.c \
	$(BSPDIR)/v5/cache.c \
	$(PLATDIR)/$(PLATNAME).c \
	$(PLATDIR)/interrupt.c \
	$(PLATDIR)/timer.c

# Driver source files

DRV_SRCS = usart_$(PLATNAME).c dma_$(PLATNAME).c rtc_$(PLATNAME).c gpio_$(PLATNAME).c i2c_$(PLATNAME).c spi_$(PLATNAME).c pwm_$(PLATNAME).c wdt_$(PLATNAME).c

DRVSRCS = ${addprefix $(DRVDIR)/v5/$(PLATNAME)/, $(DRV_SRCS)}

# Demo source files

DEMO_UART_SRCS = demo_uart.c

DEMO_GPIO_SRCS = demo_gpio.c

DEMO_RTC_SRCS = demo_rtc.c

DEMO_I2C_SRCS = demo_i2c.c

DEMO_PWM_SRCS = demo_pwm.c

DEMO_SPI_SRCS = demo_spi.c

DEMO_WDT_SRCS = demo_wdt.c

DEMOSRCS = ${addprefix $(DEMODIR)/,$(DEMO_$(DEMO)_SRCS)}

SRCS = $(BSPSRCS) $(DEMOSRCS) $(DRVSRCS)

DRVOBJS = $(patsubst %.S,%.o,$(patsubst %.cpp,%.o,$(patsubst %.c,%.o,${DRVSRCS})))
OBJS = $(patsubst %.S,%.o,$(patsubst %.cpp,%.o,$(patsubst %.c,%.o,${SRCS})))

BUILD_DRVLIB_OBJS = ${addprefix $(BUILDDIR)/, $(DRVOBJS)}
BUILD_OBJS = ${addprefix $(BUILDDIR)/, $(OBJS)}

### Verbosity control. Use 'make V=1' to get verbose builds.

ifeq ($(V),1)
TRACE_CC  =
TRACE_C++ =
TRACE_LD  =
TRACE_AR  =
TRACE_AS  =
Q=
else
TRACE_CC  = @echo "  CC       " $<
TRACE_C++ = @echo "  C++      " $<
TRACE_LD  = @echo "  LD       " $@
TRACE_AR  = @echo "  AR       " $@
TRACE_AS  = @echo "  AS       " $<
Q=@
endif

### Compilation options

LDSCRIPT = $(PLATDIR)/$(PLATNAME).ld

DEFINES = -D$(PLAT)

INCLUDE_PATH = -I$(BSPDIR)/v5 -I$(PLATDIR) -I$(DRVDIR)/include -I$(DRVDIR)/v5/$(PLATNAME)/config -I$(DRVDIR)/v5/$(PLATNAME)

CFLAGS = $(INCLUDE_PATH) \
         $(DEFINES) \
         -Wall $(OPTIM) -fno-builtin -ffunction-sections -fdata-sections \
         -fno-strict-aliasing -funroll-loops \
         -fno-delete-null-pointer-checks \
         $(CMODEL)

LDFLAGS = $(OPTIM) -static -nostartfiles -Wl,--gc-sections $(CMODEL)
ASFLAGS = -D__ASSEMBLY__ $(CFLAGS) -c

### Make variables

ifeq ($(USE_CACHE), 1)
DEFINES += -DCFG_CACHE_ENABLE
endif

# Retarget for execute in FLASH

ifeq ($(USE_FLASHEXEC), 1)
DEFINES += -DCFG_FLASHEXEC
ifeq ($(PLAT),AE250)
LDFLAGS += -Wl,--section-start=.init=80000000
endif
ifeq ($(PLAT),AE350)
LDSCRIPT = $(PLATDIR)/$(PLATNAME)-xip.ld
endif
endif


### Automatic dependency generation

DEPDIR = $(BUILDDIR)
DEPFLAGS = -MMD -MP -MF $(DEPDIR)/$*.d

### Compilation rules

.SUFFIXES : %.o %.c %.cpp %.S

$(BUILDDIR)/%.o : %.c $(DEPDIR)/%.d
	$(TRACE_CC)
	$(Q)$(CC) $(DEPFLAGS) $(CFLAGS) -c $< -o $@

$(BUILDDIR)/%.o : %.cpp $(DEPDIR)/%.d
	$(TRACE_C++)
	$(Q)$(C++) $(DEPFLAGS) $(CFLAGS) -c $< -o $@

$(BUILDDIR)/%.o : %.S
	$(TRACE_CC)
	$(Q)$(CC) $(DEPFLAGS) $(ASFLAGS) -c $< -o $@

$(DEPDIR)/%.d:
	@if test ! -d $(dir $@); then \
		mkdir -p $(dir $@); \
	fi

all: $(DEMO).elf $(DEMO).bin

clean:
	@rm -rf build
	
$(DEMO).elf: $(BUILD_OBJS)
	$(TRACE_LD)
	$(Q)$(LD) -T$(LDSCRIPT) $(LDFLAGS) $(CRTBEGIN_OBJ) $(BUILD_OBJS) $(CRTEND_OBJ) -o $(BUILDDIR)/$@

$(DEMO).bin: $(DEMO).elf
	$(Q)$(OBJCOPY) $(BUILDDIR)/$< -O binary $(BUILDDIR)/$@
	@echo Completed

	
ifneq ($(MAKECMDGOALS),clean)
#include $(patsubst %,$(DEPDIR)/%.d,$(basename $(notdir $(SRCS))))
#include $(patsubst %.c,%.d,$(SRCS))
-include $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))
endif
